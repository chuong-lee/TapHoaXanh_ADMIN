import { NextRequest, NextResponse } from 'next/server';
import { query } from '@/lib/database';

// GET - L·∫•y danh s√°ch c√°c lo·∫°i tin t·ª©c
export async function GET(request: NextRequest) {
  try {
    // L·∫•y danh s√°ch c√°c lo·∫°i tin t·ª©c t·ª´ b·∫£ng news
    const sql = `
      SELECT DISTINCT 
        n.type,
        COUNT(n.id) as count
      FROM news n
      WHERE n.deletedAt IS NULL AND n.type IS NOT NULL AND n.type != ''
      GROUP BY n.type
      ORDER BY count DESC, n.type ASC
    `;
    
    const types = await query(sql);
    
    // L·∫•y danh s√°ch c√°c ph√¢n lo·∫°i t·ª´ b·∫£ng categories
    const categoriesSql = `
      SELECT 
        c.id, c.name, c.description, c.color, c.icon,
        COUNT(n.id) as newsCount
      FROM categories c
      LEFT JOIN news n ON c.id = n.category_id AND n.deletedAt IS NULL
      WHERE c.deletedAt IS NULL
      GROUP BY c.id
      ORDER BY c.name ASC
    `;
    
    const categories = await query(categoriesSql);
    
    const formattedTypes = types.map((item: any) => ({
      type: item.type,
      count: item.count,
      label: getTypeLabel(item.type)
    }));
    
    const formattedCategories = categories.map((item: any) => ({
      id: item.id.toString(),
      name: item.name,
      description: item.description || '',
      color: item.color || '#3B82F6',
      icon: item.icon || 'üì∞',
      newsCount: item.newsCount || 0
    }));

    return NextResponse.json({
      types: formattedTypes,
      categories: formattedCategories
    });

  } catch (error) {
    console.error('Error fetching news types:', error);
    return NextResponse.json(
      { error: 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch lo·∫°i tin t·ª©c', details: error instanceof Error ? error.message : 'Unknown error' }, 
      { status: 500 }
    );
  }
}

// H√†m helper ƒë·ªÉ chuy·ªÉn ƒë·ªïi type th√†nh label ti·∫øng Vi·ªát
function getTypeLabel(type: string): string {
  const typeLabels: { [key: string]: string } = {
    'news': 'Tin t·ª©c',
    'promotion': 'Khuy·∫øn m√£i',
    'guide': 'H∆∞·ªõng d·∫´n',
    'recipe': 'C√¥ng th·ª©c',
    'health': 'S·ª©c kh·ªèe',
    'lifestyle': 'L·ªëi s·ªëng',
    'business': 'Kinh doanh',
    'technology': 'C√¥ng ngh·ªá',
    'education': 'Gi√°o d·ª•c',
    'entertainment': 'Gi·∫£i tr√≠'
  };
  
  return typeLabels[type.toLowerCase()] || type;
}
